#+TITLE: DSP Assignment 3 IIR filtering Report
#+INCLUDE: "~/.doom.d/orgReportHeader.org"
* Project Notes :noexport:
** Project to-dos:
*** TODO write report :Ben:Peter:Cammeron:
*** TODO create before and after filtering plots :Ben:
- [ ] create plotting script
- [ ] discussion in report
*** DONE Add real-time angle measurements to plot [4/4] :Ben:
- [X] write code to calc angle
- [X] integrate into real-time plot
- [X] write test
- [X] Have Cameron Check angle code with working accelerometer
*** DONE Get latex pdf compilation working [3/3] :Ben:
- [X] instal tex package
- [X] setup ORG doc for export
- [X] Copy in source code
*** DONE Share/modify plotting code
- standard resolution
- a standard aspect ratio
** Report TODOs:
*** WAIT Investigate the influence of filter cut-off freq [1/4] :Ben:NoExport:
- [X] compare rise time of different filter designs
- [-] do an FFT of the Prerecorded filter signal to determine the frequency of the sensor noise
- [-] do fft of a pre-recorded gesture to see what frequencies are present
- [-] discuss importance of rise time of the impulse response
*** DONE Create a data-flow diagram of the entire filter [1/1]:Ben:Peter:
- [X] include final filter designs as tables referring to the symbolic variables defined in the data-flow diagram
*** DONE Alter the IIR DFD to just having symbolic coefficients :Peter:
** links
+ [[https://docs.google.com/document/d/1Gv__na6-vi4wufCiEbUu9OTStYp5bxbVrcjlQLGNuso/edit][Report Google Doc]]
** Ideas
*** IDEA use file links in submission dir
Rather than copying and pasting all of the required files into the submission directory use links.
Need to know:
- [ ] does compression works with
- [ ] how does git deal with such links
- [ ] how do other peoples computers deal with such links
*** IDEA unit test in the frequency domain
- check the filter function and the filter design method in one foul swoop by interrogating the fft of a filter impulse response
*** IDEA do tilt sensor dataflow diagram using Tkiz

** Submission
*** Submission Naming Convention
+ Allowed to include any other files in submission *aside from* data files (since code is supposed to run in real time)
#+ATTR_LATEX: placement [H]
#+caption: Submission File Naming Convention
#+NAME: NamingConvention
|----------------------------+------------------------------------|
| report filename            | report.pdf                         |
| real time demo python file | realtime_iir_main.py               |
| IIR Class python file      | rununittest.py                     |
| Zip filename               | iir_2704250F_2391317R_2531525S.zip |
|----------------------------+------------------------------------|
*** Pre-Submission checklist [/]
- [ ] final submission commit is made named "Final submission #n" where n is however long it takes us to get it right
- [ ] all team participants pull this commit and extract the contents of the final commit zip to a directory of thier choosing
- [ ] all team participants verify the [[*Submission  Naming Convention][Naming Convention]] of all files as well as the zip file itself
- [ ] all participants must run the IIR Unit tests
- [ ] If possible also run the real-time plotting code
- [ ] verify content of report PDF is satisfactory

* Table Of contents :TOC_3:noexport:
- [[#introduction][Introduction]]
- [[#working-principles][Working Principles]]
- [[#filter-design][Filter design]]
  - [[#sensor-noise][Sensor noise]]
  - [[#settling-time][Settling Time]]
- [[#implementation][Implementation]]
- [[#results][Results]]
- [[#design-review][Design Review]]
- [[#future-work][Future work]]
- [[#conclusion][conclusion]]
- [[#appendices][Appendices]]
  - [[#code][Code]]
    - [[#realtime_iir_mainpy][realtime_iir_main.py]]
    - [[#rununittestpy][rununittest.py]]
    - [[#calcanglespy][calcAngles.py]]
    - [[#realtime_iir_mainpy-1][realtime_iir_main.py]]
    - [[#realtime_plotpy][realtime_plot.py]]
  - [[#links][Links]]

* Introduction
:notes:
- [ ] Present the problem
- [ ] describe the working principles of an accelerometer Bases tilt sensor
:END:

* Working Principles
:notes:
- [ ] high level data flow diagrams
:END:
* Filter design
:notes:
- [ ] justify filter design requirements
- [ ] filter dataflow diagram + discuss
- [ ] discuss/ justify filter design methods
  + butter-worth filter Scipy. Include code?
  + second order
  + No cascading required? - we don't need steep cutoff
  + also we want the code to execute as fast as possible (IIR Ideal for this application)
- [ ] discuss importance of rise time as a metric for "responsiveness"
- [ ] figure of harmonic content
- [ ] figure of impulse response
:END:
** Sensor noise
** Settling Time
* Implementation
:notes:
- [ ] discuss how sample rate was checked
- [ ] discuss unit testing
  + include here the tables of filter coefficients used (refer to dataflow diagram)
- [ ] maybe discuss how angle measurements were derived
- [ ] present images of the setup
:END:
* Results
:notes:
Treat this section as presentation of results
- [ ] present plot of the raw vs filtered data
- [ ] link to youtube video
- [ ] with reference to the youtube video
:END:
* Design Review
:notes:
- [ ] discuss limitations
  + influence of sample rate on cutoff frequency
:END:
* Future work
:notes:
- [ ] improvements
  + [ ] have the filter design recalculate based on average sample-rate
  + [ ] more instantaneous response using a gyroscope + sensor fusion
:END:
* conclusion
:notes:
- [ ] challenges faced
  + [ ] problems with firmatta I2C (documented progress)
- [ ] reiterate that we were successful
:END:
* Appendices
:notes:
- [ ] include unit test code
- [ ] include links section:
  + the git repo
  + the youtube video
  + link to bernds source code
:END:
** Code
*** realtime_iir_main.py
#+INCLUDE: "Python Code/realtime_iir_main.py" src python :lines ""
*** rununittest.py
#+INCLUDE: "Python Code/rununittest.py" src python :lines ""
*** calcAngles.py
#+INCLUDE: "Python Code/calcAngles.py" src python :lines ""
*** realtime_iir_main.py
#+INCLUDE: "Python Code/realtime_iir_main.py" src python :lines ""
*** realtime_plot.py
#+INCLUDE: "Python Code/realtime_plot.py" src python :lines ""
** Links
